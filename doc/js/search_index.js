var search_data = {"index":{"searchIndex":["applicationrecord","merchant","transaction","transactions","checkfraud","creator","executechargeback","user","new()","new()","new()","recommendation()","run()","run()","transaction_amount_limit()","transaction_cleared?()","update_merchants_blocked_transactions.rake"],"longSearchIndex":["applicationrecord","merchant","transaction","transactions","transactions::checkfraud","transactions::creator","transactions::executechargeback","user","transactions::checkfraud::new()","transactions::creator::new()","transactions::executechargeback::new()","transaction#recommendation()","transactions::creator#run()","transactions::executechargeback#run()","user#transaction_amount_limit()","transactions::checkfraud#transaction_cleared?()",""],"info":[["ApplicationRecord","","ApplicationRecord.html","",""],["Merchant","","Merchant.html","","<p>Schema Information\n<p>Table name: merchants\n\n<pre>id                  :bigint           not null, primary key\nnumber_transactions ...</pre>\n"],["Transaction","","Transaction.html","","<p>Schema Information\n<p>Table name: transactions\n\n<pre>id                 :bigint           not null, primary key ...</pre>\n"],["Transactions","","Transactions.html","",""],["Transactions::CheckFraud","","Transactions/CheckFraud.html","","<p>The CheckFraud Service class is responsible for checking if a transaction is fraudulent\n"],["Transactions::Creator","","Transactions/Creator.html","","<p>The Creator Service class is responsible for creating transactions and related records please note that …\n"],["Transactions::ExecuteChargeback","","Transactions/ExecuteChargeback.html","","<p>The ExecuteChargeback Service class is responsible for executing chargebacks on transactions\n"],["User","","User.html","","<p>Schema Information\n<p>Table name: users\n\n<pre>id                     :bigint           not null, primary key\nnumber_transactions ...</pre>\n"],["new","Transactions::CheckFraud","Transactions/CheckFraud.html#method-c-new","(transaction:, user:, merchant:)","<p>Initialize the CheckFraud instance\n<p>@param transaction [Transaction] The transaction to be checked @param …\n"],["new","Transactions::Creator","Transactions/Creator.html#method-c-new","(transaction_params:)","<p>Initialize a new Creator instance with transaction params\n<p>@param transaction_params [Hash] The parameters …\n"],["new","Transactions::ExecuteChargeback","Transactions/ExecuteChargeback.html#method-c-new","(transaction_id:)","<p>Initialize a new ExecuteChargeback instance with transaction_id\n<p>@param transaction_id [Integer] The ID …\n"],["recommendation","Transaction","Transaction.html#method-i-recommendation","()",""],["run","Transactions::Creator","Transactions/Creator.html#method-i-run","()","<p>Run the transaction creation process\n<p>@return [Boolean] true if the transaction was successfully created, …\n"],["run","Transactions::ExecuteChargeback","Transactions/ExecuteChargeback.html#method-i-run","()","<p>Execute the chargeback operation for the specified transaction\n<p>@return [Boolean] true if the chargeback …\n"],["transaction_amount_limit","User","User.html#method-i-transaction_amount_limit","()",""],["transaction_cleared?","Transactions::CheckFraud","Transactions/CheckFraud.html#method-i-transaction_cleared-3F","()","<p>Checks if the transaction should be cleared through 4 predetermined rules\n<p>@return [Boolean] true if the …\n"],["update_merchants_blocked_transactions.rake","","lib/tasks/update_merchants_blocked_transactions_rake.html","","<p>namespace :merchant do\n\n<pre>desc &#39;Update block_transactions attribute based on percentage of chargebacked transactions ...</pre>\n"]]}}